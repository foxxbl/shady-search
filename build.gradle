import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'

    alias(libs.plugins.javaFx)
    alias(libs.plugins.jpackage)
    alias(libs.plugins.lombok)
    alias(libs.plugins.springBoot)
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor platform(SpringBootPlugin.BOM_COORDINATES),
            "org.springframework.boot:spring-boot-configuration-processor"

    implementation platform(SpringBootPlugin.BOM_COORDINATES)

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api',
            libs.javafx.weaver,
            libs.material.fx,
            'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-data-jpa'

    runtimeOnly 'com.sun.xml.bind:jaxb-impl',
            'org.hsqldb:hsqldb',
            'org.springframework.boot:spring-boot-starter-log4j2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations.configureEach {
    exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging')
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

javafx {
    version = javaFxVersion
    modules = ['javafx.controls', 'javafx.fxml']
}

bootRun {
    mainClass = mainAppClass
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}


bootJar {
    mainClass = mainAppClass
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = bootJarFilename
    manifest {
        attributes 'Implementation-Version': "${project.version}"
        attributes 'Implementation-Title': packageAppName
    }
}

// Not required but useful if you want to configure a little more.
def os = org.gradle.internal.os.OperatingSystem.current()

String getVersion() {
    return "${project.version}".replaceAll("-SNAPSHOT", "")
}

jpackage {

    input = layout.buildDirectory.dir('libs').get()
    type = os.windows ? 'msi' : os.linux ? 'deb' : 'pkg'
    destination = layout.buildDirectory.dir('dist').get().asFile
    mainJar = bootJar.archiveFileName.get()

    appName = packageAppName
    appVersion = getVersion()
    vendor = packageVendor
    copyright = packageCopyright
    runtimeImage = System.getProperty("java.home")

    windows {
        icon = layout.projectDirectory.file('src/main/resources/shady-search.ico')
        // Enable adding the application to the system menu.
        winMenu = true
        // Enable adding a dialog to choose a directory in which the product is installed.
        winDirChooser = true
        // Enable creating a console launcher for the application, should be specified for application which requires console interactions.
        winConsole = false
    }

    linux {
        icon = layout.projectDirectory.file('src/main/resources/shady-search.png')
        // Group value of the RPM name.spec file or Section value of DEB control file.
        linuxAppCategory = packageLinuxAppCategory
        // Maintainer for .deb package (email)
        linuxDebMaintainer = packageLinuxDebMaintainer
        // Creates a shortcut for the application.
        linuxShortcut = true
        // Menu group this application is placed in
        linuxMenuGroup = packageAppName
    }
}


tasks.jpackage.dependsOn(bootJar)

tasks.register('printVersion') {
    doLast {
        print getVersion()
    }
}